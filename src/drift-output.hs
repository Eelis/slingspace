{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "drift-input.hs" #-}

data Color4 a = Color4 a a a a
data Vector3 a = Vector3 a a a

data Key
  = Char Char
  | SpecialKey SpecialKey
  | MouseButton MouseButton

data SpecialKey
  = KeyF1
  | KeyF2
  | KeyF3
  | KeyF4
  | KeyF5
  | KeyF6
  | KeyF7
  | KeyF8
  | KeyF9
  | KeyF10
  | KeyF11
  | KeyF12
  | KeyLeft
  | KeyUp
  | KeyRight
  | KeyDown
  | KeyPageUp
  | KeyPageDown
  | KeyHome
  | KeyEnd
  | KeyInsert

data MouseButton
  = LeftButton
  | MiddleButton
  | RightButton
  | WheelUp
  | WheelDown

data KeyState
  = Down
  | Up

{-! for Color4 derive : Read !-}
{-! for Vector3 derive : Read !-}
{-! for Key derive : Read !-}
{-! for MouseButton derive : Read !-}
{-! for SpecialKey derive : Read !-}
{-! for KeyState derive : Read !-}

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Read KeyState where
    readsPrec d input =
	      (\ inp -> [((Down) , rest) | ("Down" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((Up) , rest) | ("Up" , rest) <- lex inp]) input

instance Read SpecialKey where
    readsPrec d input =
	      (\ inp -> [((KeyF1) , rest) | ("KeyF1" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF2) , rest) | ("KeyF2" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF3) , rest) | ("KeyF3" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF4) , rest) | ("KeyF4" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF5) , rest) | ("KeyF5" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF6) , rest) | ("KeyF6" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF7) , rest) | ("KeyF7" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF8) , rest) | ("KeyF8" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF9) , rest) | ("KeyF9" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF10) , rest) | ("KeyF10" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF11) , rest) | ("KeyF11" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyF12) , rest) | ("KeyF12" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyLeft) , rest) | ("KeyLeft" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((KeyUp) , rest) | ("KeyUp" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyRight) , rest) | ("KeyRight" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((KeyDown) , rest) | ("KeyDown" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((KeyPageUp) , rest) | ("KeyPageUp" , rest) <- lex inp])
	      input
	      ++
	      (\ inp ->
	       [((KeyPageDown) , rest) | ("KeyPageDown" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((KeyHome) , rest) | ("KeyHome" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((KeyEnd) , rest) | ("KeyEnd" , rest) <- lex inp]) input
	      ++
	      (\ inp -> [((KeyInsert) , rest) | ("KeyInsert" , rest) <- lex inp])
	      input

instance Read MouseButton where
    readsPrec d input =
	      (\ inp ->
	       [((LeftButton) , rest) | ("LeftButton" , rest) <- lex inp])
	      input
	      ++
	      (\ inp ->
	       [((MiddleButton) , rest) | ("MiddleButton" , rest) <- lex inp])
	      input
	      ++
	      (\ inp ->
	       [((RightButton) , rest) | ("RightButton" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((WheelUp) , rest) | ("WheelUp" , rest) <- lex inp])
	      input
	      ++
	      (\ inp -> [((WheelDown) , rest) | ("WheelDown" , rest) <- lex inp])
	      input

instance Read Key where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Char aa) , rest) | ("Char" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((SpecialKey aa) , rest) | ("SpecialKey" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((MouseButton aa) , rest) | ("MouseButton" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance (Read a) => Read (Vector3 a) where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Vector3 aa ab ac) , rest) | ("Vector3" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance (Read a) => Read (Color4 a) where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Color4 aa ab ac ad) , rest) | ("Color4" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , inp) <- readsPrec 10 inp , (ad , rest) <- readsPrec 10 inp])
	      input

--  Imported from other files :-
